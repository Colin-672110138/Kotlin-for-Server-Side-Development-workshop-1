package org.example

import kotlin.test.Test
import kotlin.test.assertEquals



class WorkshopTest {

    // --- Tests for Workshop #1: Unit Converter ---

    // celsius input: 20.0
    // expected output: 68.0
    @Test
    fun `test celsiusToFahrenheit with positive value`() {
        // Arrange: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        val celsiusInput = 20.0
        val expectedFahrenheit = 68.0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        val actualFahrenheit = celsiusToFahrenheit(celsiusInput)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        assertEquals(expectedFahrenheit, actualFahrenheit, 0.001, "20¬∞C should be 68¬∞F")
    }

    // celsius input: 0.0
    // expected output: 32.0
    @Test
    fun `test celsiusToFahrenheit with zero`() {
        val input = 0.0
        val expected = 32.0
        val actual = celsiusToFahrenheit(input)
        assertEquals(expected, actual, 0.001, "0¬∞C should be 32¬∞F")
    }

    // celsius input: -10.0
    // expected output: 14.0
    @Test
    fun `test celsiusToFahrenheit with negative value`() {
        val input = -10.0
        val expected = 14.0
        val actual = celsiusToFahrenheit(input)
        assertEquals(expected, actual, 0.001, "-10¬∞C should be 14¬∞F")
    }

    // test for kilometersToMiles function
    // kilometers input: 1.0
    // expected output: 0.621371
    @Test
    fun `test kilometersToMiles with one kilometer`() {
        val input = 1.0
        val expected = 0.621371
        val actual = kilometersToMiles(input)
        assertEquals(expected, actual, 0.000001, "1 km should be approximately 0.621371 miles")
    }

    // --- Tests for Workshop #1: Unit Converter End ---


    // --- Tests for Workshop #2: Data Analysis Pipeline ---
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Workshop2.kt ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    // ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
    // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ calculateTotalElectronicsPriceOver500 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö List<Product> ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Double
    // ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
    // üö®
    @Test
    fun `test calculateTotalElectronicsPriceOver500`() {
        val products = listOf(
            Product("TV", "Electronics", 700.0),
            Product("Headphones", "Electronics", 300.0),
            Product("Laptop", "Electronics", 1000.0),
            Product("T-shirt", "Clothing", 200.0),
            Product("Smartphone", "Electronics", 499.0)
        )
        val expectedTotal = 1700.0 // 700 + 1000
        val actualTotal = calculateTotalElectronicsPriceOver500(products)
        assertEquals(expectedTotal, actualTotal, 0.001)
    }

    // ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î 'Electronics' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó
    // üö®
    @Test
    fun `test countElectronicsOver500`() {
        val products = listOf(
            Product("TV", "Electronics", 700.0),
            Product("Headphones", "Electronics", 300.0),
            Product("Laptop", "Electronics", 1000.0),
            Product("Smartphone", "Electronics", 499.0),
            Product("Shoes", "Clothing", 700.0)
        )
        val expectedCount = 2 // TV and Laptop
        val actualCount = countElectronicsOver500(products)
        assertEquals(expectedCount, actualCount)
    }

    // --- Tests for Workshop #2: Data Analysis Pipeline End ---
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å Workshop #1
fun celsiusToFahrenheit(celsius: Double): Double {
    return celsius * 9 / 5 + 32
}

fun kilometersToMiles(km: Double): Double {
    return km * 0.621371
}

// Data ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å Workshop #2
data class Product(val name: String, val category: String, val price: Double)

fun calculateTotalElectronicsPriceOver500(products: List<Product>): Double {
    return products
        .filter { it.category == "Electronics" && it.price > 500 }
        .sumOf { it.price }
}

fun countElectronicsOver500(products: List<Product>): Int {
    return products.count { it.category == "Electronics" && it.price > 500 }
}
